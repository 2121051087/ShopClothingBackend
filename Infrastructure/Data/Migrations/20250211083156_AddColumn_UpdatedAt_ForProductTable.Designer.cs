// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopClothing.Infrastructure.Data;

#nullable disable

namespace ShopClothing.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250211083156_AddColumn_UpdatedAt_ForProductTable")]
    partial class AddColumn_UpdatedAt_ForProductTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4854b33d-301f-4a18-87c6-47ae461e8c41",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "67cc9c22-4112-4719-8c71-3b9f3f37146d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Category.Categories", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Product.Colors", b =>
                {
                    b.Property<Guid>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorHexCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorID");

                    b.ToTable("Colors", (string)null);

                    b.HasData(
                        new
                        {
                            ColorID = new Guid("e5c095d3-7fc1-4888-bb5b-3703a41fa6d6"),
                            ColorHexCode = "#FF0000",
                            ColorName = "Red"
                        },
                        new
                        {
                            ColorID = new Guid("06ea971c-6feb-4ca3-a0d5-aa09f0cacb20"),
                            ColorHexCode = "#0000FF",
                            ColorName = "Blue"
                        },
                        new
                        {
                            ColorID = new Guid("d9d52d5c-a9db-4e7b-b898-308e8b7ea5d7"),
                            ColorHexCode = "#FFFFFF",
                            ColorName = "White"
                        },
                        new
                        {
                            ColorID = new Guid("ae00006f-f073-4940-b930-a379c8703798"),
                            ColorHexCode = "#000000",
                            ColorName = "Black"
                        },
                        new
                        {
                            ColorID = new Guid("a5a6cc4a-74a0-41f4-b248-675a29bcb06c"),
                            ColorHexCode = "#FFFF00",
                            ColorName = "Yellow"
                        },
                        new
                        {
                            ColorID = new Guid("ae462e07-8976-44ef-9cc5-f9469d4e936f"),
                            ColorHexCode = "#008000",
                            ColorName = "Green"
                        },
                        new
                        {
                            ColorID = new Guid("96f04fea-d5c2-4b45-9152-6f1991851a21"),
                            ColorHexCode = "#800080",
                            ColorName = "Purple"
                        },
                        new
                        {
                            ColorID = new Guid("4d150749-a421-4a1a-ae1e-5d67f540ed51"),
                            ColorHexCode = "#FFC0CB",
                            ColorName = "Pink"
                        },
                        new
                        {
                            ColorID = new Guid("26c2c040-a83d-4742-8838-d606131b3f20"),
                            ColorHexCode = "#FFA500",
                            ColorName = "Orange"
                        },
                        new
                        {
                            ColorID = new Guid("c3e5aa52-1190-4741-9f89-f6bd2eb7811b"),
                            ColorHexCode = "#A52A2A",
                            ColorName = "Brown"
                        },
                        new
                        {
                            ColorID = new Guid("017b0052-cf95-4d50-9363-c5a530a1f1de"),
                            ColorHexCode = "#808080",
                            ColorName = "Gray"
                        },
                        new
                        {
                            ColorID = new Guid("4833a2df-0c28-4d2b-844f-88f1c3894655"),
                            ColorHexCode = "#C0C0C0",
                            ColorName = "Silver"
                        },
                        new
                        {
                            ColorID = new Guid("e3c86f95-e475-4810-bdde-90895c3c3aaa"),
                            ColorHexCode = "#FFD700",
                            ColorName = "Gold"
                        });
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Product.Product_Attributes", b =>
                {
                    b.Property<Guid>("Product_AttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ColorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SizeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_AttributeID");

                    b.HasIndex("ColorID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SizeID");

                    b.ToTable("Product_Attributes", (string)null);
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Product.Products", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Product.Sizes", b =>
                {
                    b.Property<Guid>("SizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SizeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeID");

                    b.ToTable("Sizes", (string)null);

                    b.HasData(
                        new
                        {
                            SizeID = new Guid("c3ecdf33-88f7-4042-8e3c-834183fef29c"),
                            SizeName = "XS"
                        },
                        new
                        {
                            SizeID = new Guid("3dafd5a9-98a4-4451-af0f-844ae6a4bd31"),
                            SizeName = "S"
                        },
                        new
                        {
                            SizeID = new Guid("06d36083-5e6f-405a-8aba-bcd58c902b94"),
                            SizeName = "M"
                        },
                        new
                        {
                            SizeID = new Guid("126746a5-e9f5-4556-841e-a7b511cdfa60"),
                            SizeName = "L"
                        },
                        new
                        {
                            SizeID = new Guid("9e7c7e76-acca-416a-9689-067ed415c432"),
                            SizeName = "XL"
                        },
                        new
                        {
                            SizeID = new Guid("55557c5e-93ab-46f8-b988-6a5af528899a"),
                            SizeName = "XXL"
                        },
                        new
                        {
                            SizeID = new Guid("b3177eb2-8e24-464e-9314-090c15318d84"),
                            SizeName = "XXXL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShopClothing.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShopClothing.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopClothing.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShopClothing.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Product.Product_Attributes", b =>
                {
                    b.HasOne("ShopClothing.Domain.Entities.Product.Colors", "Colors")
                        .WithMany("Product_Attributes")
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShopClothing.Domain.Entities.Product.Products", "Products")
                        .WithMany("Product_Attributes")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopClothing.Domain.Entities.Product.Sizes", "Sizes")
                        .WithMany("Product_Attributes")
                        .HasForeignKey("SizeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Colors");

                    b.Navigation("Products");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Product.Products", b =>
                {
                    b.HasOne("ShopClothing.Domain.Entities.Category.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Category.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Product.Colors", b =>
                {
                    b.Navigation("Product_Attributes");
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Product.Products", b =>
                {
                    b.Navigation("Product_Attributes");
                });

            modelBuilder.Entity("ShopClothing.Domain.Entities.Product.Sizes", b =>
                {
                    b.Navigation("Product_Attributes");
                });
#pragma warning restore 612, 618
        }
    }
}
